// ==UserScript==
// @name         Universal GitHub Tasks
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  try to take over the world!
// @author       https://github.com/BriceShatzer
// @match        https://github.com/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    let state_commitTimesConverted = false;
    let state_diffCollapserCreated = false;
    let state_usernamesConverted = false;

    updateState();
//    showWikiButtons();
    window.onpopstate = function(event) {
        console.log('popstate fired');
        updateState();
        //showWikiButtons();
    };

    function updateState() {
        state_commitTimesConverted = document.querySelectorAll('relative-time').length > 0 ? true : false;
        state_diffCollapserCreated = document.querySelectorAll('button[aria-label="Toggle diff text"]').length > 0 ? true : false;
        state_usernamesConverted = document.querySelectorAll('real-name').length > 0 ? true : false;

        console.log('states updated:');
        console.log('commitTimesConverted-'+state_commitTimesConverted);
        console.log('diffCollapserCreated-'+state_diffCollapserCreated);
        console.log('usernamesConverted-'+state_usernamesConverted);

        createDiffCollapser();
        convertCommitTimes();
        convertUsernamesToRealNames();
    }
/* ಠ_ಠ
    function showWikiButtons() {
        let wikiButtons = document.getElementById('gollum-editor-function-buttons');
        if(wikiButtons){wikiButtons.style.display = 'block';}
    }
*/
/* Create Tampermonkey Re-run Button */
    let reRunButton = document.createElement('img');
    reRunButton.setAttribute('src','https://camo.githubusercontent.com/9919bc7e220f6919cdac2d9ec00b99caa9791c3b/687474703a2f2f692e696d6775722e636f6d2f3539566766457a2e706e67');
    reRunButton.setAttribute('style','position:fixed;top:16px;left:16px;z-index:50;cursor:pointer;max-width:16px');
    reRunButton.addEventListener('click',()=>{
        updateState();
    });
    document.body.append(reRunButton);

/* Convert Commit Times To Non-realtive */
    function convertCommitTimes() {
        if(state_commitTimesConverted === false) {
            window.setTimeout(convertCommitTimes, 750);
        } else {
            state_commitTimesConverted = true;
            let commitTimes = document.querySelectorAll('relative-time');
            commitTimes.forEach((el)=>{
                let fullTime = el.title;
                el.innerHTML = '<strong>'+fullTime+'</strong>';
            });
        }
    }

/* Create Diff Collapser */
    function createDiffCollapser() {
        if(state_diffCollapserCreated === false) {
            window.setTimeout(createDiffCollapser, 750);
        } else {
            state_diffCollapserCreated = true;
            let staleElements = document.querySelectorAll('#diffCollapser');
            if(staleElements.length>0){
                staleElements.forEach((el)=>{
                    el.parentNode.removeChild(el);
                });
            }
            let el = document.createElement('button');
            el.setAttribute('id','diffCollapser');
            el.setAttribute('style','position:fixed;left:2rem;bottom:50vh;z-index:50;');
            el.setAttribute('class', 'btn');
            el.innerHTML = 'Collapse Diffs';
            el.addEventListener('click',()=>{

                if(el.innerHTML === 'Collapse Diffs'){
                    collapseDiffs();
                    el.innerHTML = 'Expand Diffs';
                } else {
                    expandDiffs();
                    el.innerHTML = 'Collapse Diffs';
                }

            });
            document.body.append(el);
        }

        function expandDiffs() {
            let collapsedElements = Object.values(getElements()).filter(el=> el.getAttribute('aria-expanded')==='false');
            clickElements(collapsedElements);
        }

        function collapseDiffs() {
            let expandedElements = Object.values(getElements()).filter(el=> el.getAttribute('aria-expanded')==='true');
            clickElements(expandedElements);
        }

        function getElements() {
            let allElements = document.querySelectorAll('button[aria-label="Toggle diff text"]');
            return allElements;
        }

        function clickElements(elementsArr) {
            elementsArr.forEach((el)=>{
                el.click();
            });
        }
    }
/* Create Diff Collapser */
    function convertUsernamesToRealNames() {
        const usernames = [...document.querySelectorAll('.author')];

        usernames.forEach( (element) => {
            let url = 'https://api.github.com/users/'+element.innerText;
            let request = new XMLHttpRequest();
            request.open('GET', url, true);

            request.onload = function() {
              if (this.status >= 200 && this.status < 400) {
                // Success!
                var resp = this.response;
                var userObj = JSON.parse(resp);
                console.log(userObj);

                //console.log( resp);

              } else {
                console.log('Looks like there was a problem. Status Code: ' + this.status);
                // We reached our target server, but it returned an error
              }
            };

            request.onerror = function(err) {
              // There was a connection error of some sort
              console.log('Fetch Error :-S', err);

            };
            request.send();


            //-- trying to use fetch
/*
            let newName = fetch(url)
                .then( (response) => {
                    if (response.status !== 200) {
                        console.log('Looks like there was a problem. Status Code: ' + response.status);
                        return 'ErrorInRetrivial';
                    }

                    response.json().then(function(data) {
                        console.log(data.name);
                        return data.name;
                    });
                })
                .catch(function(err) {
                    console.log('Fetch Error :-S', err);
                    return 'ErrorInRetrivial';
                });
            if (newName !== 'ErrorInRetrivial') {
                element.innerText = newName;
                element.classList.add('real-name');
            }
*/

        });
    }





    // -- adventures in mutationObserving
/*
    let target = document.querySelector('div[role="main"]');
    let config = { attributes: true, childList: true, characterData: true };
    let observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            console.log(mutation.type);
        });
    });
    observer.observe(target, config);
*/



    // -- setting state at an interval
/*    window.setInterval(function(){
        console.log('state_commitTimesConverted: ' + state_commitTimesConverted);
        console.log('state_diffCollapserCreated: ' + state_diffCollapserCreated);
    }, 3000);
*/


})();
