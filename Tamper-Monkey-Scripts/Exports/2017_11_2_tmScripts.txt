{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Hacker News collapsible comments","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["https://news.ycombinator.com/item?id=*","https://news.ycombinator.com/threads?*","https://news.ycombinator.com/x?fnid=*"],"orig_matches":["https://news.ycombinator.com/item?id=*","https://news.ycombinator.com/threads?*","https://news.ycombinator.com/x?fnid=*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509040351005},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/2960-hacker-news-collapsible-comments/code/Hacker%20News%20collapsible%20comments.user.js","uuid":"7119b1fb-fcf9-4630-8da3-9acfa4cde5cd","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUJCQlIYWNrZXIgTmV3cyBjb2xsYXBzaWJsZSBjb21tZW50cwovLyBAbmFtZXNwYWNlICAgICAgICAgICAgICAgICAgIGhhY2tlcm5ld3Njb2xsYXBzZWNvbW1lbnRzCi8vIEBkZXNjcmlwdGlvbgkJICAgICAgICBSZWRkaXQgc3R5bGUgY29sbGFwc2libGUgY29tbWVudHMgZm9yIEhhY2tlciBOZXdzCi8vIEB2ZXJzaW9uCQkJMS4wCi8vIEBhdXRob3IJCQlrYWl4aQovLyBAaG9tZXBhZ2UJCSAgICAgICAgaHR0cDovL3VzZXJzY3JpcHRzLm9yZy9zY3JpcHRzL3Nob3cvMTM4MDM3Ci8vIEBpbmNsdWRlCQkJaHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPSoKLy8gQGluY2x1ZGUJCQlodHRwczovL25ld3MueWNvbWJpbmF0b3IuY29tL3RocmVhZHM/KgovLyBAaW5jbHVkZQkJCWh0dHBzOi8vbmV3cy55Y29tYmluYXRvci5jb20veD9mbmlkPSoKLy8gQG1hdGNoCQkJaHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPSoKLy8gQG1hdGNoCQkJaHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS90aHJlYWRzPyoKLy8gQG1hdGNoCQkJaHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS94P2ZuaWQ9KgovLyBAZ3JhbnQgICAgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgaW5pdCA9IGZ1bmN0aW9uKCkgewoJLy8gQ1NTIHN0eWxlcyBmb3IgdGhlIHRvZ2dsZSBidXR0b24KCXZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CglzdHlsZS5pbm5lckhUTUwgPSAnLnRvZ2dsZV9idXR0b24geyBjdXJzb3I6IHBvaW50ZXI7IGZvbnQtc2l6ZTogMTBweDsgbWFyZ2luLXJpZ2h0OiA1cHg7IHBhZGRpbmc6IDAgMXB4IDFweDsgfScKCQkJCQkJKyAnIC5ob3ZlciB7IGJhY2tncm91bmQ6ICM4MjgyODI7IGNvbG9yOiAjZjZmNmVmOyB9JzsKCWRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpOwoKCS8vIEZpbmQgYWxsIHRoZSBjb21tZW50cwoJdmFyIGNvbW1lbnRzID0gW107CgkJaSA9IDA7CgkkKCd0ZC5kZWZhdWx0JykuZWFjaChmdW5jdGlvbigpIHsKCQl2YXIgY29tbWVudCA9ICQoJCh0aGlzKS5wYXJlbnRzKCd0cicpWzFdKS5hZGRDbGFzcygnY29sbGFwc2libGUnKS5hdHRyKCdpZCcsIGkgKyAnX2NvbW1lbnQnKTsKCQljb21tZW50cy5wdXNoKHsKCQkJY29udGFpbmVyOiBjb21tZW50LAoJCQlpbmRlbnRhdGlvbjogY29tbWVudC5maW5kKCdpbWcnKS5maXJzdCgpWzBdLndpZHRoCgkJfSk7CgkJKytpOwoJfSk7CgoJJCgnPHNwYW4+PC9zcGFuPicsIHsKCQl0ZXh0OiAnW+KAk10nLAoJCWNsYXNzOiAndG9nZ2xlX2J1dHRvbicKCX0pCgkJLmluc2VydEJlZm9yZSgnZGl2ID4gLmNvbWhlYWQnKQoJCS5vbignbW91c2VlbnRlcicsIGZ1bmN0aW9uKCkgewoJCQkkKHRoaXMpLmFkZENsYXNzKCdob3ZlcicpOwoJCX0pCgkJLm9uKCdtb3VzZWxlYXZlJywgZnVuY3Rpb24oKSB7CgkJCSQodGhpcykucmVtb3ZlQ2xhc3MoJ2hvdmVyJyk7CgkJfSkKCQkub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7CgkJCXZhciAkdGhpcyA9ICQodGhpcyksCgkJCQljdXJyZW50X2lkID0gcGFyc2VJbnQoJHRoaXMuY2xvc2VzdCgndHIuY29sbGFwc2libGUnKS5hdHRyKCdpZCcpKSwKCQkJCWkgPSBjdXJyZW50X2lkICsgMSwKCQkJCWNoaWxkcmVuX2NvdW50ID0gMDsKCQkJLy8gVG9nZ2xlIGNoaWxkIGNvbW1lbnRzCgkJCXdoaWxlKGkgPCBjb21tZW50cy5sZW5ndGggJiYgY29tbWVudHNbaV0uaW5kZW50YXRpb24gPiBjb21tZW50c1tjdXJyZW50X2lkXS5pbmRlbnRhdGlvbikgewoJCQkJY29tbWVudHNbaV0uY29udGFpbmVyLnRvZ2dsZSgpOwoJCQkJLy8gU2tpcCBjb21tZW50cyB0aGF0IHNob3VsZG4ndCBiZSB0b2dnbGVkCgkJCQlpZiAoL1srXS9pLnRlc3QoY29tbWVudHNbaV0uY29udGFpbmVyLmZpbmQoJ3NwYW4udG9nZ2xlX2J1dHRvbicpLnRleHQoKSkpIHsKCQkJCQl2YXIgaiA9IGkgKyAxOwoJCQkJCXdoaWxlKGogPCBjb21tZW50cy5sZW5ndGggJiYgY29tbWVudHNbal0uaW5kZW50YXRpb24gPiBjb21tZW50c1tpXS5pbmRlbnRhdGlvbikgewoJCQkJCQlqKys7CgkJCQkJfQoJCQkJCWkgPSBqOwoJCQkJfSBlbHNlIHsKCQkJCQlpKys7CgkJCQl9CgkJCX0KCQkJLy8gVG9nZ2xlIGN1cnJlbnQgY29tbWVudCAJCgkJCXZhciBjb250ZW50ID0gY29tbWVudHNbY3VycmVudF9pZF0uY29udGFpbmVyLmZpbmQoJ3NwYW4uY29tbWVudCcpLnRvZ2dsZSgpLm5leHQoKS50b2dnbGUoKS5lbmQoKTsKCQkJaWYgKGNvbnRlbnQuaXMoJzp2aXNpYmxlJykpIHsKCQkJCSR0aGlzLnRleHQoJ1vigJNdJyk7CgkJCX0gZWxzZSB7CgkJCQkkdGhpcy50ZXh0KCdbK10nKTsgICAgICAgICAgICAgICAgICAgCgkJCX0KCQl9KTsKfTsKCi8vIENyZWRpdDogaHR0cDovL2VyaWt2b2xkLmNvbS9ibG9nL2luZGV4LmNmbS8yMDEwLzYvMTQvdXNpbmctanF1ZXJ5LXdpdGgtYS11c2VyLXNjcmlwdAooZnVuY3Rpb24oZm4pIHsKCXZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKCXNjcmlwdC5zcmMgPSAnaHR0cHM6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMi4wLjMvanF1ZXJ5Lm1pbi5qcyc7CglzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkgewoJCXZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKCQlzY3JpcHQudGV4dENvbnRlbnQgPSAnalF1ZXJ5Lm5vQ29uZmxpY3QoKTsoZnVuY3Rpb24oJCl7KCcgKyBmbi50b1N0cmluZygpICsgJykoKTt9KShqUXVlcnkpOyc7CgkJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwoJfSwgZmFsc2UpOwoJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpOwp9KShpbml0KTs="},{"name":"Google Calendar Weekend Highlighter","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://calendar.google.com/calendar/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509040351008},"enabled":false,"position":2,"uuid":"eb2f835e-7dfa-4701-ba6d-2c354830f72e","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHb29nbGUgQ2FsZW5kYXIgV2Vla2VuZCBIaWdobGlnaHRlcgovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vY2FsZW5kYXIuZ29vZ2xlLmNvbS9jYWxlbmRhci8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBIaWdobGlnaHQgdGhlIHdlZWtlbmQgZGF5cyBpbiBHb29nbGUgQ2FsZW5kYXIncyBtb250aCB2aWV3Ci8vIEBhdXRob3IgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL0JyaWNlU2hhdHplcgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vY2FsZW5kYXIuZ29vZ2xlLmNvbS9jYWxlbmRhci8qCi8vIEBncmFudCAgICAgICAgR01fYWRkU3R5bGUKLy8gPT0vVXNlclNjcmlwdD09Ci8qIGpzaGludCAtVzA5NyAqLwovLyd1c2Ugc3RyaWN0JzsKCnZhciBjb2x1bW5zVG9DaGFuZ2UgPSBbXTsKdmFyIGxhYmVscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tdi1kYXluYW1lJyk7CnZhciByb3dzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1vbnRoLXJvdyAuc3QtYmctdGFibGUgdHIsIC5tb250aC1yb3cgLnN0LWdyaWQgdHI6Zmlyc3Qtb2YtdHlwZScpOwp2YXIgYmdDb2xvciA9ICdMaWdodEdvbGRlblJvZFllbGxvdyc7CgpmdW5jdGlvbiBmb3JFYWNoKGFycmF5LCBmdW5jKXsKICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoYXJyYXksIGZ1bmMpOwp9Cgpmb3JFYWNoKGxhYmVscywgZnVuY3Rpb24obGFiZWwsaSl7CiAgICBpZihsYWJlbC50aXRsZSA9PT0gIlNhdCIgfHwgbGFiZWwudGl0bGUgPT09ICJTdW4iKXsKICAgICAgICBjb2x1bW5zVG9DaGFuZ2UucHVzaChpKTsKICAgIH0KfSk7Cgpmb3JFYWNoKHJvd3MsIGZ1bmN0aW9uKHJvdyl7CiAgICBjb2x1bW5zVG9DaGFuZ2UuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7CiAgICAgICAgdmFsdWUrPTE7CiAgICAgICAgR01fYWRkU3R5bGUoIi5tb250aC1yb3cgLnN0LWJnLXRhYmxlIHRyIHRkOm50aC1vZi10eXBlKCIrdmFsdWUrIiksIC5tb250aC1yb3cgLnN0LWdyaWQgdHI6Zmlyc3Qtb2YtdHlwZSB0ZDpudGgtb2YtdHlwZSgiK3ZhbHVlKyIpe2JhY2tncm91bmQtY29sb3I6IitiZ0NvbG9yKyJ9Iik7CiAgICB9KTsKfSk7Cg=="},{"name":"Improve usablity of docs on sass-lang.com","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://sass-lang.com/documentation/file.SASS_REFERENCE.html"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509040351012},"enabled":true,"position":3,"file_url":"Make sass-docs table of contents usable","uuid":"a6128fe6-cb43-4c2a-98f4-ab865b54741c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBJbXByb3ZlIHVzYWJsaXR5IG9mIGRvY3Mgb24gc2Fzcy1sYW5nLmNvbQovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9zYXNzLWxhbmcuY29tL2RvY3VtZW50YXRpb24vCi8vIEB2ZXJzaW9uICAgICAgMS4wCi8vIEBkZXNjcmlwdGlvbiAgTWFrZSBkb2N1bWVudGF0aW9uIHBhZ2Ugb24gc2Fzcy1sYW5nLmNvbSBtb3JlIHVzYWJsZSBieSBmaXhpbmcgdGhlIFRPQyB0byB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgdmlld3BvcnQuCi8vIEBhdXRob3IgICAgICAgaHR0cDovL2dpdGh1Yi5jb20vQnJpY2VTaGF0emVyCi8vIEBtYXRjaCAgICAgICAgKjovL3Nhc3MtbGFuZy5jb20vZG9jdW1lbnRhdGlvbi9maWxlLlNBU1NfUkVGRVJFTkNFLmh0bWwKLy8gQGdyYW50ICAgICAgICBHTV9hZGRTdHlsZQovLyA9PS9Vc2VyU2NyaXB0PT0KLyoganNoaW50IC1XMDk3ICovCid1c2Ugc3RyaWN0JzsKCkdNX2FkZFN0eWxlKCcjdG9je3Bvc2l0aW9uOiBmaXhlZDsgcmlnaHQ6IDA7dG9wOiAwOyBvdmVyZmxvdy15OiBzY3JvbGw7IG1hcmdpbi1sZWZ0OjA7aGVpZ2h0OiAxMDAlO30nKTsKCkdNX2FkZFN0eWxlKCcjY29udGVudHtwYWRkaW5nLXJpZ2h0OicrZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RvYycpLnNjcm9sbFdpZHRoKydweDt9Jyk7"},{"name":"Fixing issues cause by Lastpass","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://timelord.doejo.com/*","https://onlinebanking.ecu.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509040351014},"enabled":true,"position":4,"uuid":"9bf0148b-4e85-44af-8d75-7d63ccc53983","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBGaXhpbmcgaXNzdWVzIGNhdXNlIGJ5IExhc3RwYXNzCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgSGlkZGluZyB0aGUgIkZvcm0gRmlsbCIgaWNvbiB0aGF0IGxhc3QgcGFzcyBhZGRzIHRvIHVucmVjb2duaXphYmxlIGZvcm0gaW5wdXRzCi8vIEBhdXRob3IgICAgICAgQnJpY2VTaGF0emVyCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly90aW1lbG9yZC5kb2Vqby5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vb25saW5lYmFua2luZy5lY3UuY29tLyoKLy8gQGdyYW50ICAgICAgICBHTV9hZGRTdHlsZQovLyA9PS9Vc2VyU2NyaXB0PT0KLyoganNoaW50IC1XMDk3ICovCid1c2Ugc3RyaWN0JzsKCmlmKGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lLmluZGV4T2YoJ29ubGluZWJhbmtpbmcuZWN1LmNvbScpPi0xKXsgICAgCiAgIEdNX2FkZFN0eWxlKCIjdHJhbnNmZXJfYW1vdW50e3RleHQtYWxpZ246bGVmdH0iKTsKfQoKaWYoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUuaW5kZXhPZigndGltZWxvcmQuZG9lam8uY29tJyk+LTEpewogICAgR01fYWRkU3R5bGUoImRpdltpZF49J19fbHBmb3JtX2lucHV0J117ZGlzcGxheTpub25lICFpbXBvcnRhbnR9Iik7Cn0KCg=="},{"name":"Add link to hourly view on RescueTime","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.rescuetime.com/dashboard?*","https://www.rescuetime.com/dashboard/for/the/day/of/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509040351016},"enabled":true,"position":5,"uuid":"52630e59-1bcc-424a-9dac-6ddce3c10ec0","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBBZGQgbGluayB0byBob3VybHkgdmlldyBvbiBSZXNjdWVUaW1lCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly93d3cucmVzY3VldGltZS5jb20vZGFzaGJvYXJkCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgSW5qZWN0IGEgbGluayB0byB0aGUgaG91cmx5IHZpZXcgb24gdGhlIFJlc2N1ZVRpbWUgZGFzaGJvYXJkIHBhZ2VzLgovLyBAYXV0aG9yICAgICAgIGh0dHA6Ly9naXRodWIuY29tL0JyaWNlU2hhdHplcgovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vd3d3LnJlc2N1ZXRpbWUuY29tL2Rhc2hib2FyZD8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cucmVzY3VldGltZS5jb20vZGFzaGJvYXJkL2Zvci90aGUvZGF5L29mLyoKLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKdmFyIHBhdGggPSBkb2N1bWVudC5sb2NhdGlvbi5wYXRobmFtZQp2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKdmFyIGRhdGUgPSAnJzsKCmZ1bmN0aW9uIHBhcnNlT3V0RGF0ZShzdHJpbmcpewogICAgcmV0dXJuIHN0cmluZy5zdWJzdHJpbmcoc3RyaW5nLmxhc3RJbmRleE9mKCcvJykrMSk7Cn0KCgppZiAoIC9kYXNoYm9hcmRcL2ZvclwvdGhlXC9kYXlcL29mLy50ZXN0LnBhdGggKXsKICAgIGRhdGUgPSBwYXJzZU91dERhdGUocGF0aCk7Cn0gZWxzZSB7CiAgICBkYXRlID0gcGFyc2VPdXREYXRlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNkYXNoYm9hcmQtb3ZlcnZpZXctbGlzdCBhJykuaHJlZik7Cn0KLy9zZXQgbGluayBhdHRyaWJ1dGVzIApsaW5rLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnU2VlIEhvdXJseSBPdmVydmlldycpICkKbGluay5zdHlsZT0gJ2ZvbnQtd2VpZ2h0OmJvbGQ7JysKICAgICAgICAgICAgJ2ZvbnQtc2l6ZToyMHB4OycrCiAgICAgICAgICAgICdtYXJnaW4tbGVmdDogMjBweDsnKwogICAgICAgICAgICAncGFkZGluZzoxMHB4OycrCiAgICAgICAgICAgICdjb2xvcjogIzg4ODsnKwogICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcjogI2ZmZjsnKwogICAgICAgICAgICAnYm9yZGVyLXJhZGl1czogM3B4OycrCiAgICAgICAgICAgICdib3JkZXI6c29saWQgMXB4ICM2Mzc3ODc7JwpsaW5rLmhyZWY9ICdodHRwczovL3d3dy5yZXNjdWV0aW1lLmNvbS9icm93c2Uvb3ZlcnZpZXcvYnkvaG91ci9mb3IvdGhlL2RheS9vZi8nK2RhdGU7CgoKZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BhZ2UtY29udGVudC1oZWFkZXIgaDEnKS5hcHBlbmRDaGlsZChsaW5rKTsK"},{"name":"Auto-set Timecalc to today","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://www.timeanddate.com/date/timeduration.html"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1509040351019},"enabled":true,"position":6,"uuid":"98fb6504-d21a-4eff-87b0-30630f679fd8","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBBdXRvLXNldCBUaW1lY2FsYyB0byB0b2RheQovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly93d3cudGltZWFuZGRhdGUuY29tL2RhdGUvdGltZWR1cmF0aW9uLmh0bWwKLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBUcmlnZ2VyIHRoZSAnVG9kYXknIGNsaWNrIGhhbmRsZXJzIGZvciB0aGUgU3RhcnQgJiBFbmQgZGF0ZXMgb24gbG9hZAovLyBAYXV0aG9yICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9CcmljZVNoYXR6ZXIKLy8gQG1hdGNoICAgICAgICBodHRwOi8vd3d3LnRpbWVhbmRkYXRlLmNvbS9kYXRlL3RpbWVkdXJhdGlvbi5odG1sCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KLyoganNoaW50IC1XMDk3ICovCid1c2Ugc3RyaWN0JzsKCnZhciB0b2RheUxpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYVt0aXRsZSQ9IkRhdGUgdG8gdG9kYXlcJ3MgZGF0ZS4iXScpOwoKdG9kYXlMaW5rc1swXS5vbmNsaWNrLmFwcGx5KHRvZGF5TGlua3NbMF0pOwp0b2RheUxpbmtzWzFdLm9uY2xpY2suYXBwbHkodG9kYXlMaW5rc1sxXSk7CgppZih0b2RheUxpbmtzLmxlbmd0aD4yKXsKICAgIGFsZXJ0KCd0aGUgdXNlcnNjcmlwdCB0aGF0IGhhcyBiZWVuIHNldHVwIGZvciB0aGlzIHBhZ2UgbWF5IG5vIGxvbmdlciBiZSB2YWxpZCAnKTsKfQ=="},{"name":"GitHub Pull Request File View - Collapse All","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://github.com/*/pull/*/files","https://github.com/*/pull/*/commits","https://github.com/*/commit/*","https://github.com/*/commits/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1509400832430,"data":{}},"enabled":false,"position":7,"uuid":"e97c43de-914f-4107-895d-c558c8fba783","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBHaXRIdWIgUHVsbCBSZXF1ZXN0IEZpbGUgVmlldyAtIENvbGxhcHNlIEFsbAovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBTZWUgTmFtZQovLyBAYXV0aG9yICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9CcmljZVNoYXR6ZXIKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vKi9wdWxsLyovZmlsZXMKLy8gQG1hdGNoICAgICAgICBodHRwczovL2dpdGh1Yi5jb20vKi9wdWxsLyovY29tbWl0cwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS8qL2NvbW1pdC8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tLyovY29tbWl0cy8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKLy8gICAgJ3VzZSBzdHJpY3QnOwoKICAgIGxldCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogICAgZWwuc2V0QXR0cmlidXRlKCdzdHlsZScsJ3Bvc2l0aW9uOmZpeGVkO2xlZnQ6MnJlbTtib3R0b206NTB2aDt6LWluZGV4OjU7Jyk7CiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ2J0bicpOwogICAgZWwuaW5uZXJIVE1MID0gJ0NvbGxhcHNlIERpZmZzJzsKICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoKT0+ewoKICAgICAgICBpZihlbC5pbm5lckhUTUwgPT09ICdDb2xsYXBzZSBEaWZmcycpewogICAgICAgICAgICBjb2xsYXBzZURpZmZzKCk7CiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICdFeHBhbmQgRGlmZnMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGV4cGFuZERpZmZzKCk7CiAgICAgICAgICAgIGVsLmlubmVySFRNTCA9ICdDb2xsYXBzZSBEaWZmcyc7CiAgICAgICAgfQoKICAgIH0pOwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmQoZWwpOwoKCiAgICBmdW5jdGlvbiBleHBhbmREaWZmcygpIHsKICAgICAgICBsZXQgY29sbGFwc2VkRWxlbWVudHMgPSBPYmplY3QudmFsdWVzKGdldEVsZW1lbnRzKCkpLmZpbHRlcihlbD0+IGVsLmdldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcpPT09J2ZhbHNlJyk7CiAgICAgICAgY2xpY2tFbGVtZW50cyhjb2xsYXBzZWRFbGVtZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gY29sbGFwc2VEaWZmcygpIHsKICAgICAgICBsZXQgZXhwYW5kZWRFbGVtZW50cyA9IE9iamVjdC52YWx1ZXMoZ2V0RWxlbWVudHMoKSkuZmlsdGVyKGVsPT4gZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJyk9PT0ndHJ1ZScpOwogICAgICAgIGNsaWNrRWxlbWVudHMoZXhwYW5kZWRFbGVtZW50cyk7CiAgICB9CgogICAgZnVuY3Rpb24gZ2V0RWxlbWVudHMoKSB7CiAgICAgICAgbGV0IGFsbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uW2FyaWEtbGFiZWw9IlRvZ2dsZSBkaWZmIHRleHQiXScpOwogICAgICAgIHJldHVybiBhbGxFbGVtZW50czsKICAgIH0KCiAgICBmdW5jdGlvbiBjbGlja0VsZW1lbnRzKGVsZW1lbnRzQXJyKSB7CiAgICAgICAgZWxlbWVudHNBcnIuZm9yRWFjaCgoZWwpPT57CiAgICAgICAgICAgIGVsLmNsaWNrKCk7CiAgICAgICAgfSk7CiAgICB9Cgp9KSgpOw=="},{"name":"Universal GitHub Tasks","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://github.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1509991450224,"data":{}},"enabled":true,"position":8,"uuid":"a54d5ecf-4e53-4472-a139-fee85e21c7eb","source":""},{"name":"Chicago Suntimes Paywall Killer","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["https://chicago.suntimes.com/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":[]}},"storage":{"ts":1541527710076,"data":{}},"enabled":true,"position":9,"uuid":"270cb634-5123-42b3-942b-ac1acf4a73a9","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDaGljYWdvIFN1bnRpbWVzIFBheXdhbGwgS2lsbGVyCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9jaGljYWdvLnN1bnRpbWVzLmNvbS8qCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgSW50ZXJtaXR0ZW50bHkgbnVrZXMgdGhlaXIgbW9kYWwvYmFja2Ryb3AgdGhleSBwdXQgdXAKLy8gQGF1dGhvciAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQnJpY2VTaGF0emVyCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9jaGljYWdvLnN1bnRpbWVzLmNvbS8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCihmdW5jdGlvbigpIHsKICAgICd1c2Ugc3RyaWN0JzsKICAgIHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRwLW1vZGFsJyk7CiAgICAgICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudHAtYmFja2Ryb3AnKTsKICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTsKICAgICAgICBvdmVybGF5LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3ZlcmxheSk7CiAgICAgICAgbW9kYWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtb2RhbCk7CiAgICAgICAgYm9keS5jbGFzc0xpc3QucmVtb3ZlKCd0cC1tb2RhbC1vcGVuJyk7CiAgICB9LCAyNTAwKTsKfSkoKTs="},{"name":"Anti-Adblock Killer | Reek","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":true,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["*"],"orig_excludes":[],"orig_includes":["http://*/*","https://*/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"autoPlay":"bfalse","checkList":"bfalse","checkUpdate":"bfalse","debug":"bfalse","forceVLC":"bfalse","logDetected":"bfalse","logExcluded":"bfalse","logInsertedNodes":"bfalse","logInterceptedScripts":"bfalse","logPlayer":"bfalse","logRemovedNodes":"bfalse","logXhr":"bfalse","nextchecklist":"s1512062598305","nextcheckupdate":"s1512581002266","videoHD":"bfalse"},"ts":1511976224667},"enabled":false,"position":10,"file_url":"https://greasyfork.org/scripts/735-anti-adblock-killer-reek/code/Anti%20Adblock%20Killer%20%7C%20Reek.user.js","uuid":"7fade075-779e-4bba-aa9b-e5c099c7702b","source":""},{"name":"User Defined Redirects","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["*://tappedout.com/*","*://www.tappedout.com/*","*://*pixlr.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1525457219824,"data":{}},"enabled":false,"position":11,"uuid":"2466c71c-a9fc-4009-ae14-73b8e2ccb476","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBVc2VyIERlZmluZWQgUmVkaXJlY3RzCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2JyaWNlc2hhdHplci5jb20KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBSZWRpcmVjdHMgdGhhdCBzcGVlZCB0aGluZ3Mgb3IgY2F0Y2ggbWlzdGFrZXMKLy8gQGF1dGhvciAgICAgICBodHRwczovL2dpdGh1Yi5jb20vQnJpY2VTaGF0emVyCi8vIEBpbmNsdWRlICAgICAgKjovL3RhcHBlZG91dC5jb20vKgovLyBAaW5jbHVkZSAgICAgICo6Ly93d3cudGFwcGVkb3V0LmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovLypwaXhsci5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gZ2V0Q3VycmVudExvY2F0aW9uKCk7CgogICAgLy8gUGl4bHIKICAgIGlmIChjdXJyZW50TG9jYXRpb24uaG9zdG5hbWUuaW5jbHVkZXMoInBpeGxyIikgJiYgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lID09PSAiLyIpIHsKICAgICAgICBzZXRDdXJyZW50TG9jYXRpb24oImh0dHBzOi8vcGl4bHIuY29tL2VkaXRvciIpOwogICAgfQoKICAgIC8vdGFwcGVkb3V0CiAgICBpZiAoY3VycmVudExvY2F0aW9uLmhvc3RuYW1lLmluY2x1ZGVzKCJ0YXBwZWRvdXQuY29tIikpIHsKICAgICAgICBzZXRDdXJyZW50TG9jYXRpb24oImh0dHA6Ly90YXBwZWRvdXQubmV0Iik7CiAgICB9CgogICAgLy8gdXRpbGl0eSBmdW5jdGlvbnMKICAgIGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbigpIHsKICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uOwogICAgfQogICAgZnVuY3Rpb24gc2V0Q3VycmVudExvY2F0aW9uKGhyZWYpIHsKICAgICAgICB3aW5kb3cubG9jYXRpb24gPSBocmVmOwogICAgfQoKCiAgICAvLyBZb3VyIGNvZGUgaGVyZS4uLgp9KSgpOw=="},{"name":"Twitter Play In Background","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://twitter.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1540395585760,"data":{}},"enabled":false,"position":12,"uuid":"9ba71427-1c5d-4dde-867e-017733f3455a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBUd2l0dGVyIFBsYXkgSW4gQmFja2dyb3VuZAovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly90d2l0dGVyLmNvbS8KLy8gQHZlcnNpb24gICAgICAwLjEKLy8gQGRlc2NyaXB0aW9uICBUd2l0dGVyIFBhZ2UgVmlzaWJpbGl0eSBBUEkgQmxvY2tlcgovLyBAYXV0aG9yICAgICAgIHdwZWFycwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vdHdpdHRlci5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAndXNlIHN0cmljdCc7CiAgICB2YXIgcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpCiAgICBzLnRleHRDb250ZW50ID0KICAgICAgICAnKGZ1bmN0aW9uKCkgeycgKwogICAgICAgICd2YXIgYSA9IE5vZGUucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI7JyArCiAgICAgICAgJ05vZGUucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihlKSB7JyArCiAgICAgICAgImlmIChlICE9PSAndmlzaWJpbGl0eWNoYW5nZScgJiYgZSAhPT0gJ3dlYmtpdHZpc2liaWxpdHljaGFuZ2UnKSB7IiArCiAgICAgICAgJ2EuYXBwbHkodGhpcywgYXJndW1lbnRzKScgKwogICAgICAgICd9fScgKwogICAgICAgICd9KSgpJwogICAgOyhkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQocykKICAgIHMucmVtb3ZlKCkKfSkoKTs="}]}